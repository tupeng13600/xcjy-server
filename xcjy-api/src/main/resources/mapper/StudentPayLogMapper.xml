<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xcjy.web.mapper.StudentPayLogMapper">
    <resultMap id="BaseResultMap" type="com.xcjy.web.bean.StudentPayLog">
        <result column="id" jdbcType="VARCHAR" property="id"/>
        <result column="school_id" jdbcType="VARCHAR" property="schoolId"/>
        <result column="student_id" jdbcType="VARCHAR" property="studentId"/>
        <result column="employee_id" jdbcType="VARCHAR" property="employeeId"/>
        <result column="op_pay_type" jdbcType="VARCHAR" property="opPayType"/>
        <result column="money" jdbcType="INTEGER" property="money"/>
        <result column="remark" jdbcType="VARCHAR" property="remark"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
    </resultMap>

    <sql id="baseSql">
        id, school_id, student_id, employee_id, op_pay_type, money, remark, create_time
    </sql>

    <insert id="insert" parameterType="com.xcjy.web.bean.StudentPayLog">
    INSERT INTO student_pay_log
    (id, school_id, student_id,
      employee_id, op_pay_type, money, 
      remark, create_time)
    VALUES
    (#{id,jdbcType=VARCHAR}, #{schoolId,jdbcType=VARCHAR}, #{studentId,jdbcType=VARCHAR},
      #{employeeId,jdbcType=VARCHAR}, #{opPayType,jdbcType=VARCHAR}, #{money,jdbcType=INTEGER}, 
      #{remark,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}
      )
  </insert>

    <select id="getByEmployeeId" resultMap="BaseResultMap">
        SELECT
        <include refid="baseSql"/>
        FROM student_pay_log
        WHERE employee_id = #{employeeId}
        <if test="startTime != null">
            AND create_time >= #{startTime}
        </if>
        <if test="endTime != null">
            AND create_time &lt;= #{endTime}
        </if>
        ORDER BY create_time DESC
    </select>

    <select id="getStatModelByEmpIds" resultType="com.xcjy.web.controller.res.PayStatModel">
        SELECT
        employee_id AS employeeId,
        count(id) AS signNum,
        SUM(money) AS totalMoney
        FROM student_pay_log WHERE employee_id IN
        <foreach collection="employeeIds" item="employeeId" open="(" separator="," close=")">
            #{employeeId}
        </foreach>
        GROUP BY employeeId ORDER BY totalMoney DESC, signNum DESC
    </select>

</mapper>